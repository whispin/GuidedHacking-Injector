name: Build GH Injector Library and GUI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-library:
    runs-on: windows-latest

    strategy:
      matrix:
        configuration: [Release]
        platform: [x86, x64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup VS Dev Environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.platform }}

    - name: Build Library Solution
      run: |
        # Try building projects individually for x86 to isolate issues
        if ("${{ matrix.platform }}" -eq "x86") {
          echo "Building GH Injector Library project..."
          msbuild "GH Injector Library\GH Injector Library.vcxproj" /p:Configuration=${{ matrix.configuration }} /p:Platform=Win32 /p:WholeProgramOptimization=false /p:TreatWarningAsError=false
          
          echo "Building GH Injector DNP project..."
          msbuild "GH Injector DNP\GH Injector DNP.vcxproj" /p:Configuration=${{ matrix.configuration }} /p:Platform=Win32 /p:WholeProgramOptimization=false /p:TreatWarningAsError=false
          
          echo "Building GH Injector SM project..."
          msbuild "GH Injector SM\GH Injector SM\GH Injector SM.vcxproj" /p:Configuration=${{ matrix.configuration }} /p:Platform=Win32 /p:WholeProgramOptimization=false /p:TreatWarningAsError=false
        } else {
          msbuild "GH Injector Library.sln" /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }} /m
        }

    - name: List library build output
      run: |
        echo "Listing library build output directories:"
        Get-ChildItem -Recurse -Include "*.dll","*.exe" | Select-Object FullName

    - name: Prepare library artifacts
      run: |
        $platformDir = "${{ matrix.platform }}"
        $configDir = "${{ matrix.configuration }}"
        
        # Create artifact directory
        mkdir -Force "library-artifacts"
        
        # Define build output directories to search
        $searchPaths = @()
        if ("${{ matrix.platform }}" -eq "x86") {
          $searchPaths += "GH Injector Library\Win32\${{ matrix.configuration }}"
          $searchPaths += "GH Injector DNP\Win32\${{ matrix.configuration }}"
          $searchPaths += "GH Injector SM\GH Injector SM\Win32\${{ matrix.configuration }}"
          $searchPaths += "Win32\${{ matrix.configuration }}"
        } else {
          $searchPaths += "GH Injector Library\x64\${{ matrix.configuration }}"
          $searchPaths += "GH Injector DNP\x64\${{ matrix.configuration }}"
          $searchPaths += "GH Injector SM\GH Injector SM\x64\${{ matrix.configuration }}"
          $searchPaths += "x64\${{ matrix.configuration }}"
        }
        
        # Track copied files to avoid duplicates
        $copiedFiles = @{}
        
        # Search in specific build output directories
        foreach ($searchPath in $searchPaths) {
          if (Test-Path $searchPath) {
            echo "Searching in: $searchPath"
            Get-ChildItem -Path $searchPath -Include "*.dll","*.exe" -File | ForEach-Object {
              $fileName = $_.Name
              $fullPath = $_.FullName
              
              # Skip if we already copied this file name
              if (-not $copiedFiles.ContainsKey($fileName)) {
                echo "Found: $fullPath"
                Copy-Item $fullPath "library-artifacts\" -Force
                $copiedFiles[$fileName] = $true
              } else {
                echo "Skipping duplicate: $fullPath"
              }
            }
          }
        }
        
        # Fallback: search for any remaining files not in library-artifacts
        Get-ChildItem -Recurse -Include "*.dll","*.exe" -File | Where-Object {
          $_.DirectoryName -notlike "*library-artifacts*" -and
          ($_.DirectoryName -like "*Release*" -or $_.DirectoryName -like "*Debug*")
        } | ForEach-Object {
          $fileName = $_.Name
          $fullPath = $_.FullName
          
          # Skip if we already copied this file name
          if (-not $copiedFiles.ContainsKey($fileName)) {
            echo "Found additional: $fullPath"
            Copy-Item $fullPath "library-artifacts\" -Force
            $copiedFiles[$fileName] = $true
          }
        }
        
        echo "Library artifacts directory contents:"
        Get-ChildItem "library-artifacts" | Select-Object Name

    - name: Upload Library Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: GH-Injector-Library-${{ matrix.configuration }}-${{ matrix.platform }}
        path: library-artifacts/
        if-no-files-found: warn

  build-gui:
    runs-on: windows-latest
    needs: build-library

    strategy:
      matrix:
        configuration: [Release, Static]
        platform: [x86, x64]
        exclude:
          - configuration: Static
            platform: x86

    steps:
    - name: Checkout GUI repository
      uses: actions/checkout@v4
      with:
        repository: guided-hacking/GH-Injector-GUI
        path: gui

    - name: Checkout Library repository
      uses: actions/checkout@v4
      with:
        path: library

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup VS Dev Environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.platform }}

    - name: Verify build environment
      run: |
        echo "=== Build Environment Information ==="
        echo "MSBuild version:"
        msbuild -version
        echo ""
        echo "Available .NET Framework versions:"
        Get-ChildItem "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework" -Directory -ErrorAction SilentlyContinue | Select-Object Name
        echo ""
        echo "Visual Studio components:"
        Get-ChildItem "C:\Program Files*\Microsoft Visual Studio\*\*\MSBuild" -Directory -ErrorAction SilentlyContinue | Select-Object FullName

    - name: Install Qt 5.15.2
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: 'windows'
        target: 'desktop'
        arch: ${{ matrix.platform == 'x86' && 'win32_msvc2019' || 'win64_msvc2019_64' }}
        modules: 'qtcharts qtdatavis3d'
        cache: true

    - name: Download static Qt build (Static x64 only)
      if: matrix.configuration == 'Static'
      run: |
        echo "Downloading static Qt build..."
        $url = "https://github.com/martinrotter/qt5-minimalistic-builds/releases/download/5.15.2/qt-5.15.2-static-msvc2019-x86_64.7z"
        $output = "qt-static.7z"
        Invoke-WebRequest -Uri $url -OutFile $output
        
        echo "Extracting static Qt build..."
        7z x $output -o"C:\Qt\5.15.2\"
        
        echo "Static Qt extracted to C:\Qt\5.15.2\qt-5.15.2-static-msvc2019-x86_64"

    - name: Download library artifacts
      uses: actions/download-artifact@v4
      with:
        name: GH-Injector-Library-${{ matrix.configuration == 'Static' && 'Release' || matrix.configuration }}-${{ matrix.platform }}
        path: library-binaries

    - name: Copy library binaries to GUI project
      run: |
        echo "Copying library binaries to GUI project..."
        if (Test-Path "library-binaries") {
          Copy-Item "library-binaries\*" "gui\" -Recurse -Force
          echo "Library binaries copied successfully"
        } else {
          echo "Warning: Library binaries not found"
        }

    - name: Setup Qt environment variables
      run: |
        if ("${{ matrix.configuration }}" -eq "Static") {
          $qtPath = "C:\Qt\5.15.2\qt-5.15.2-static-msvc2019-x86_64"
          echo "Using static Qt path: $qtPath"
        } else {
          $qtPath = $env:Qt5_Dir
          echo "Using dynamic Qt path: $qtPath"
        }
        
        if (Test-Path $qtPath) {
          echo "Qt5_DIR=$qtPath" >> $env:GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$qtPath" >> $env:GITHUB_ENV
          echo "QTDIR=$qtPath" >> $env:GITHUB_ENV
          echo "$qtPath\bin" >> $env:GITHUB_PATH
          echo "Qt environment configured successfully"
        } else {
          echo "Warning: Qt path not found: $qtPath"
          echo "Available Qt installations:"
          Get-ChildItem "C:\Qt" -Directory -ErrorAction SilentlyContinue | Select-Object FullName
        }

    - name: Build GUI Solution
      working-directory: gui
      run: |
        $platform = "${{ matrix.platform }}"
        $config = "${{ matrix.configuration }}"
        $msbuildPlatform = if ($platform -eq "x86") { "Win32" } else { "x64" }
        
        echo "=== GUI Build Information ==="
        echo "Matrix Configuration: ${{ matrix.configuration }}"
        echo "Matrix Platform: ${{ matrix.platform }}"
        echo "Resolved Configuration: $config"
        echo "Resolved Platform: $msbuildPlatform"
        echo "Qt Directory: $env:QTDIR"
        echo ""
        
        echo "Available solution files:"
        Get-ChildItem "*.sln" | Select-Object Name
        echo ""
        
        echo "Checking solution configurations..."
        $solutionFile = "GH Injector GUI.sln"
        if (Test-Path $solutionFile) {
          echo "Solution file exists: $solutionFile"
          echo ""
          echo "Available solution configurations:"
          Get-Content $solutionFile | Where-Object { $_ -match "^\s*(Debug|Release|Static)\|" } | ForEach-Object { $_.Trim() }
          echo ""
          echo "Looking for target configuration: $config|$msbuildPlatform"
          $targetConfig = "$config|$msbuildPlatform"
          $configExists = Get-Content $solutionFile | Where-Object { $_ -match [regex]::Escape($targetConfig) }
          if ($configExists) {
            echo "Target configuration found in solution"
          } else {
            echo "Target configuration NOT found in solution"
            echo "Available configurations containing '$config':"
            Get-Content $solutionFile | Where-Object { $_ -match $config } | ForEach-Object { $_.Trim() }
          }
        } else {
          echo "Solution file not found: $solutionFile"
          echo "Available files:"
          Get-ChildItem | Select-Object Name
        }
        
        echo ""
        echo "Building GUI solution with: Configuration=$config, Platform=$msbuildPlatform"
        msbuild $solutionFile /p:Configuration=$config /p:Platform=$msbuildPlatform /p:WholeProgramOptimization=false /p:TreatWarningAsError=false /m /verbosity:minimal

    - name: List GUI build output
      working-directory: gui
      run: |
        echo "Listing GUI build output:"
        Get-ChildItem -Recurse -Include "*.exe","*.dll" | Select-Object FullName

    - name: Prepare GUI artifacts
      working-directory: gui
      run: |
        $platform = "${{ matrix.platform }}"
        $config = "${{ matrix.configuration }}"
        
        # Create artifact directory
        mkdir -Force "gui-artifacts"
        
        # Define build output directories to search
        $searchPaths = @()
        if ($platform -eq "x86") {
          $searchPaths += "GH Injector GUI\Win32\$config"
          $searchPaths += "GH Injector\Win32\$config"
          $searchPaths += "Win32\$config"
        } else {
          $searchPaths += "GH Injector GUI\x64\$config"
          $searchPaths += "GH Injector\x64\$config"
          $searchPaths += "x64\$config"
        }
        
        # Track copied files to avoid duplicates
        $copiedFiles = @{}
        
        # Search in specific build output directories
        foreach ($searchPath in $searchPaths) {
          if (Test-Path $searchPath) {
            echo "Searching GUI files in: $searchPath"
            Get-ChildItem -Path $searchPath -Include "*.exe","*.dll" -File | ForEach-Object {
              $fileName = $_.Name
              $fullPath = $_.FullName
              
              # Skip if we already copied this file name
              if (-not $copiedFiles.ContainsKey($fileName)) {
                echo "Found GUI file: $fullPath"
                Copy-Item $fullPath "gui-artifacts\" -Force
                $copiedFiles[$fileName] = $true
              } else {
                echo "Skipping duplicate GUI file: $fullPath"
              }
            }
          }
        }
        
        # Fallback: search for any remaining GUI files not in gui-artifacts
        Get-ChildItem -Recurse -Include "*.exe","*.dll" -File | Where-Object {
          $_.DirectoryName -notlike "*gui-artifacts*" -and
          ($_.DirectoryName -like "*$config*" -or $_.DirectoryName -like "*Release*" -or $_.DirectoryName -like "*Debug*")
        } | ForEach-Object {
          $fileName = $_.Name
          $fullPath = $_.FullName
          
          # Skip if we already copied this file name
          if (-not $copiedFiles.ContainsKey($fileName)) {
            echo "Found additional GUI file: $fullPath"
            Copy-Item $fullPath "gui-artifacts\" -Force
            $copiedFiles[$fileName] = $true
          }
        }
        
        # Copy Qt DLLs for non-static builds
        if ("$config" -ne "Static") {
          echo "Copying Qt runtime DLLs..."
          $qtBinPath = "$env:QTDIR\bin"
          if (Test-Path $qtBinPath) {
            $qtDlls = @("Qt5Core.dll", "Qt5Gui.dll", "Qt5Widgets.dll", "Qt5Network.dll")
            foreach ($dll in $qtDlls) {
              $dllPath = Join-Path $qtBinPath $dll
              if (Test-Path $dllPath) {
                $dllFileName = Split-Path $dllPath -Leaf
                if (-not $copiedFiles.ContainsKey($dllFileName)) {
                  Copy-Item $dllPath "gui-artifacts\" -Force
                  echo "Copied Qt DLL: $dll"
                  $copiedFiles[$dllFileName] = $true
                }
              }
            }
          }
        }
        
        echo "GUI artifacts directory contents:"
        Get-ChildItem "gui-artifacts" | Select-Object Name

    - name: Upload GUI Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: GH-Injector-GUI-${{ matrix.configuration }}-${{ matrix.platform }}
        path: gui/gui-artifacts/
        if-no-files-found: warn

  package:
    needs: [build-library, build-gui]
    runs-on: windows-latest
    if: success()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create complete release package
      run: |
        mkdir release-package
        
        # Create platform directories
        mkdir "release-package/x86"
        mkdir "release-package/x64"
        
        # Copy library files
        if (Test-Path "GH-Injector-Library-Release-x86") {
          Copy-Item "GH-Injector-Library-Release-x86/*" "release-package/x86/" -Recurse -Force
        }
        if (Test-Path "GH-Injector-Library-Release-x64") {
          Copy-Item "GH-Injector-Library-Release-x64/*" "release-package/x64/" -Recurse -Force
        }
        
        # Copy GUI files (Release builds)
        if (Test-Path "GH-Injector-GUI-Release-x86") {
          Copy-Item "GH-Injector-GUI-Release-x86/*" "release-package/x86/" -Recurse -Force
        }
        if (Test-Path "GH-Injector-GUI-Release-x64") {
          Copy-Item "GH-Injector-GUI-Release-x64/*" "release-package/x64/" -Recurse -Force
        }
        
        # Copy static GUI builds (standalone executables - x64 only)
        if (Test-Path "GH-Injector-GUI-Static-x64") {
          mkdir "release-package/x64-static"
          Copy-Item "GH-Injector-GUI-Static-x64/*" "release-package/x64-static/" -Recurse -Force
        }
        
        echo "Complete package structure:"
        Get-ChildItem "release-package" -Recurse | Select-Object FullName

    - name: Upload Complete Package
      uses: actions/upload-artifact@v4
      with:
        name: GH-Injector-Complete-Package
        path: release-package/
        if-no-files-found: error